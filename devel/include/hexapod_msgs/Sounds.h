// Generated by gencpp from file hexapod_msgs/Sounds.msg
// DO NOT EDIT!


#ifndef HEXAPOD_MSGS_MESSAGE_SOUNDS_H
#define HEXAPOD_MSGS_MESSAGE_SOUNDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapod_msgs
{
template <class ContainerAllocator>
struct Sounds_
{
  typedef Sounds_<ContainerAllocator> Type;

  Sounds_()
    : torque(false)
    , battery(false)
    , auto_level(false)
    , stand(false)
    , waiting(false)
    , shut_down(false)  {
    }
  Sounds_(const ContainerAllocator& _alloc)
    : torque(false)
    , battery(false)
    , auto_level(false)
    , stand(false)
    , waiting(false)
    , shut_down(false)  {
  (void)_alloc;
    }



   typedef uint8_t _torque_type;
  _torque_type torque;

   typedef uint8_t _battery_type;
  _battery_type battery;

   typedef uint8_t _auto_level_type;
  _auto_level_type auto_level;

   typedef uint8_t _stand_type;
  _stand_type stand;

   typedef uint8_t _waiting_type;
  _waiting_type waiting;

   typedef uint8_t _shut_down_type;
  _shut_down_type shut_down;





  typedef boost::shared_ptr< ::hexapod_msgs::Sounds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_msgs::Sounds_<ContainerAllocator> const> ConstPtr;

}; // struct Sounds_

typedef ::hexapod_msgs::Sounds_<std::allocator<void> > Sounds;

typedef boost::shared_ptr< ::hexapod_msgs::Sounds > SoundsPtr;
typedef boost::shared_ptr< ::hexapod_msgs::Sounds const> SoundsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_msgs::Sounds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_msgs::Sounds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_msgs::Sounds_<ContainerAllocator1> & lhs, const ::hexapod_msgs::Sounds_<ContainerAllocator2> & rhs)
{
  return lhs.torque == rhs.torque &&
    lhs.battery == rhs.battery &&
    lhs.auto_level == rhs.auto_level &&
    lhs.stand == rhs.stand &&
    lhs.waiting == rhs.waiting &&
    lhs.shut_down == rhs.shut_down;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_msgs::Sounds_<ContainerAllocator1> & lhs, const ::hexapod_msgs::Sounds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_msgs::Sounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_msgs::Sounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msgs::Sounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msgs::Sounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msgs::Sounds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msgs::Sounds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_msgs::Sounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e277e5433232e212c4281205788a826";
  }

  static const char* value(const ::hexapod_msgs::Sounds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e277e5433232e21ULL;
  static const uint64_t static_value2 = 0x2c4281205788a826ULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_msgs::Sounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msgs/Sounds";
  }

  static const char* value(const ::hexapod_msgs::Sounds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_msgs::Sounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool torque\n"
"bool battery\n"
"bool auto_level\n"
"bool stand\n"
"bool waiting\n"
"bool shut_down\n"
;
  }

  static const char* value(const ::hexapod_msgs::Sounds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_msgs::Sounds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.torque);
      stream.next(m.battery);
      stream.next(m.auto_level);
      stream.next(m.stand);
      stream.next(m.waiting);
      stream.next(m.shut_down);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sounds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_msgs::Sounds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_msgs::Sounds_<ContainerAllocator>& v)
  {
    s << indent << "torque: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque);
    s << indent << "battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery);
    s << indent << "auto_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_level);
    s << indent << "stand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stand);
    s << indent << "waiting: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waiting);
    s << indent << "shut_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shut_down);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_MSGS_MESSAGE_SOUNDS_H
