# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h_robix_control/GetGroupMotorDataRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetGroupMotorDataRequest(genpy.Message):
  _md5sum = "d795fe8db7df6ecaaf527340a3fe3a91"
  _type = "h_robix_control/GetGroupMotorDataRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 motor1_id
uint8 motor2_id
uint8 motor3_id
uint8 motor4_id
uint8 motor5_id
uint8 motor6_id
string data_required
"""
  __slots__ = ['motor1_id','motor2_id','motor3_id','motor4_id','motor5_id','motor6_id','data_required']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor1_id,motor2_id,motor3_id,motor4_id,motor5_id,motor6_id,data_required

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGroupMotorDataRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor1_id is None:
        self.motor1_id = 0
      if self.motor2_id is None:
        self.motor2_id = 0
      if self.motor3_id is None:
        self.motor3_id = 0
      if self.motor4_id is None:
        self.motor4_id = 0
      if self.motor5_id is None:
        self.motor5_id = 0
      if self.motor6_id is None:
        self.motor6_id = 0
      if self.data_required is None:
        self.data_required = ''
    else:
      self.motor1_id = 0
      self.motor2_id = 0
      self.motor3_id = 0
      self.motor4_id = 0
      self.motor5_id = 0
      self.motor6_id = 0
      self.data_required = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.motor1_id, _x.motor2_id, _x.motor3_id, _x.motor4_id, _x.motor5_id, _x.motor6_id))
      _x = self.data_required
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.motor1_id, _x.motor2_id, _x.motor3_id, _x.motor4_id, _x.motor5_id, _x.motor6_id,) = _get_struct_6B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_required = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data_required = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.motor1_id, _x.motor2_id, _x.motor3_id, _x.motor4_id, _x.motor5_id, _x.motor6_id))
      _x = self.data_required
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.motor1_id, _x.motor2_id, _x.motor3_id, _x.motor4_id, _x.motor5_id, _x.motor6_id,) = _get_struct_6B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_required = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data_required = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h_robix_control/GetGroupMotorDataResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetGroupMotorDataResponse(genpy.Message):
  _md5sum = "e0e3d18e7869b30592a29da15bfc2666"
  _type = "h_robix_control/GetGroupMotorDataResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 motor1_data
int32 motor2_data
int32 motor3_data
int32 motor4_data
int32 motor5_data
int32 motor6_data

"""
  __slots__ = ['motor1_data','motor2_data','motor3_data','motor4_data','motor5_data','motor6_data']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor1_data,motor2_data,motor3_data,motor4_data,motor5_data,motor6_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGroupMotorDataResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor1_data is None:
        self.motor1_data = 0
      if self.motor2_data is None:
        self.motor2_data = 0
      if self.motor3_data is None:
        self.motor3_data = 0
      if self.motor4_data is None:
        self.motor4_data = 0
      if self.motor5_data is None:
        self.motor5_data = 0
      if self.motor6_data is None:
        self.motor6_data = 0
    else:
      self.motor1_data = 0
      self.motor2_data = 0
      self.motor3_data = 0
      self.motor4_data = 0
      self.motor5_data = 0
      self.motor6_data = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.motor1_data, _x.motor2_data, _x.motor3_data, _x.motor4_data, _x.motor5_data, _x.motor6_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.motor1_data, _x.motor2_data, _x.motor3_data, _x.motor4_data, _x.motor5_data, _x.motor6_data,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.motor1_data, _x.motor2_data, _x.motor3_data, _x.motor4_data, _x.motor5_data, _x.motor6_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.motor1_data, _x.motor2_data, _x.motor3_data, _x.motor4_data, _x.motor5_data, _x.motor6_data,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
class GetGroupMotorData(object):
  _type          = 'h_robix_control/GetGroupMotorData'
  _md5sum = '1d809d6a5bd5cdb4eacfae0651cc8f04'
  _request_class  = GetGroupMotorDataRequest
  _response_class = GetGroupMotorDataResponse
