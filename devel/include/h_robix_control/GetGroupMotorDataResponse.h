// Generated by gencpp from file h_robix_control/GetGroupMotorDataResponse.msg
// DO NOT EDIT!


#ifndef H_ROBIX_CONTROL_MESSAGE_GETGROUPMOTORDATARESPONSE_H
#define H_ROBIX_CONTROL_MESSAGE_GETGROUPMOTORDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h_robix_control
{
template <class ContainerAllocator>
struct GetGroupMotorDataResponse_
{
  typedef GetGroupMotorDataResponse_<ContainerAllocator> Type;

  GetGroupMotorDataResponse_()
    : motor1_data(0)
    , motor2_data(0)
    , motor3_data(0)
    , motor4_data(0)
    , motor5_data(0)
    , motor6_data(0)  {
    }
  GetGroupMotorDataResponse_(const ContainerAllocator& _alloc)
    : motor1_data(0)
    , motor2_data(0)
    , motor3_data(0)
    , motor4_data(0)
    , motor5_data(0)
    , motor6_data(0)  {
  (void)_alloc;
    }



   typedef int32_t _motor1_data_type;
  _motor1_data_type motor1_data;

   typedef int32_t _motor2_data_type;
  _motor2_data_type motor2_data;

   typedef int32_t _motor3_data_type;
  _motor3_data_type motor3_data;

   typedef int32_t _motor4_data_type;
  _motor4_data_type motor4_data;

   typedef int32_t _motor5_data_type;
  _motor5_data_type motor5_data;

   typedef int32_t _motor6_data_type;
  _motor6_data_type motor6_data;





  typedef boost::shared_ptr< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGroupMotorDataResponse_

typedef ::h_robix_control::GetGroupMotorDataResponse_<std::allocator<void> > GetGroupMotorDataResponse;

typedef boost::shared_ptr< ::h_robix_control::GetGroupMotorDataResponse > GetGroupMotorDataResponsePtr;
typedef boost::shared_ptr< ::h_robix_control::GetGroupMotorDataResponse const> GetGroupMotorDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator1> & lhs, const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.motor1_data == rhs.motor1_data &&
    lhs.motor2_data == rhs.motor2_data &&
    lhs.motor3_data == rhs.motor3_data &&
    lhs.motor4_data == rhs.motor4_data &&
    lhs.motor5_data == rhs.motor5_data &&
    lhs.motor6_data == rhs.motor6_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator1> & lhs, const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h_robix_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0e3d18e7869b30592a29da15bfc2666";
  }

  static const char* value(const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0e3d18e7869b305ULL;
  static const uint64_t static_value2 = 0x92a29da15bfc2666ULL;
};

template<class ContainerAllocator>
struct DataType< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h_robix_control/GetGroupMotorDataResponse";
  }

  static const char* value(const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motor1_data\n"
"int32 motor2_data\n"
"int32 motor3_data\n"
"int32 motor4_data\n"
"int32 motor5_data\n"
"int32 motor6_data\n"
"\n"
;
  }

  static const char* value(const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor1_data);
      stream.next(m.motor2_data);
      stream.next(m.motor3_data);
      stream.next(m.motor4_data);
      stream.next(m.motor5_data);
      stream.next(m.motor6_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGroupMotorDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h_robix_control::GetGroupMotorDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "motor1_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor1_data);
    s << indent << "motor2_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor2_data);
    s << indent << "motor3_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor3_data);
    s << indent << "motor4_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor4_data);
    s << indent << "motor5_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor5_data);
    s << indent << "motor6_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor6_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H_ROBIX_CONTROL_MESSAGE_GETGROUPMOTORDATARESPONSE_H
